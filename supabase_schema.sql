-- Users are handled by Supabase Auth. Below are app tables with RLS.

create table if not exists public.posts (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  title text not null,
  content text not null,
  market text not null default 'Crypto',
  images jsonb not null default '[]'::jsonb,
  likes jsonb not null default '[]'::jsonb,
  comments jsonb not null default '[]'::jsonb,
  created_at timestamp with time zone not null default now()
);

create table if not exists public.workouts (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  date date not null,
  time text,
  type text not null,
  notes text,
  remind_before integer not null default 15,
  created_at timestamp with time zone not null default now()
);

create table if not exists public.events (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  date date not null,
  time text,
  title text not null,
  notes text,
  remind_before integer not null default 30,
  created_at timestamp with time zone not null default now()
);

create table if not exists public.trades (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  asset text not null,
  side text not null check (side in ('BUY','SELL')),
  qty numeric not null,
  price numeric not null,
  market text not null,
  style text not null,
  date date not null,
  notes text,
  stop_loss numeric,
  take_profit numeric,
  trailing_enabled boolean not null default false,
  trailing_type text check (trailing_type in ('percent','amount')),
  trailing_value numeric,
  remaining_qty numeric not null,
  closures jsonb not null default '[]'::jsonb,
  created_at timestamp with time zone not null default now()
);

create table if not exists public.finance_profiles (
  user_id uuid primary key references auth.users(id) on delete cascade,
  is_employed boolean,
  has_extra_income boolean,
  income_days jsonb not null default '[]'::jsonb,
  typical_income_amount text,
  income_currency text,
  has_debts boolean,
  has_emergency_cash boolean,
  emergency_base numeric not null default 0,
  has_investments boolean,
  notify_enabled boolean not null default false
);

create table if not exists public.finance_debts (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  name text not null,
  amount numeric not null,
  currency text not null default 'USD'
);

create table if not exists public.finance_emergency_tx (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  date date not null,
  type text not null check (type in ('deposit','withdraw')),
  amount numeric not null,
  currency text not null default 'USD',
  location text,
  note text
);

create table if not exists public.finance_invest_tx (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  date date not null,
  type text not null check (type in ('in','out')),
  amount numeric not null,
  currency text not null default 'USD',
  destination text,
  note text
);

-- Enable RLS
alter table public.posts enable row level security;
alter table public.workouts enable row level security;
alter table public.events enable row level security;
alter table public.trades enable row level security;
alter table public.finance_profiles enable row level security;
alter table public.finance_debts enable row level security;
alter table public.finance_emergency_tx enable row level security;
alter table public.finance_invest_tx enable row level security;

-- Policies: owner-only read/write
create policy if not exists posts_owner_select on public.posts
  for select using (auth.uid() = user_id);
create policy if not exists posts_owner_all on public.posts
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists workouts_owner_select on public.workouts
  for select using (auth.uid() = user_id);
create policy if not exists workouts_owner_all on public.workouts
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists events_owner_select on public.events
  for select using (auth.uid() = user_id);
create policy if not exists events_owner_all on public.events
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists trades_owner_select on public.trades
  for select using (auth.uid() = user_id);
create policy if not exists trades_owner_all on public.trades
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists finance_profiles_owner on public.finance_profiles
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists finance_debts_owner on public.finance_debts
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists finance_emergency_tx_owner on public.finance_emergency_tx
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);

create policy if not exists finance_invest_tx_owner on public.finance_invest_tx
  for all using (auth.uid() = user_id) with check (auth.uid() = user_id);


